create database CASESTUDY
use  CASESTUDY
 alter procedure al 
as 
begin
 select * from fact as fact
select * from [dbo].[Location] as loc
select * from [dbo].[Product] as pro
 end




-- Dataset:
----The 3 key datasets for this case study:
----a. FactTable: The Fact Table has 14 columns mentioned belowand4200rows. Date, ProductID, Profit, Sales, Margin, COGS,
--Total Expenses, Marketing, Inventory, Budget Profit, Budget COGS, Budget Margin, Budget
----Sales, and Area Code
----Note: COGS stands for Cost of Goods Sold
----b. ProductTable: The ProductTable has four columns named Product Type, Product, ProductID, and Type.
--It has 13 rows which can be brokendowninto further details to retrieve the information mentioned in theFactTable. c.
--LocationTable: Finally, the LocationTable has 156 rows andfollowsasimilar approach to ProductTable. It has four columns named AreaCode, 
--State, Market, and Market Size. Tasks to be performed:


--1. Display the number of states present in the LocationTable. 

select count (distinct(state)) from location as numberofstates 

 

-- 2. How many products are of regular type?
select count (*) from product where type='regular'


--3. How much spending has been done on marketing of product ID 1?
select sum(marketing) from fact   where ProductId=1  
 

--4. What is the minimum sales of a product?
 

select product ,sales from fact
inner join
product
on
fact.productid=product.productid
where sales=(select  min(sales) from fact)
 
 



--5. Display the max Cost of Good Sold (COGS).


select product,cogs from fact 
inner join 
product
on
fact.productid=product.productid
where cogs=(
select max(cogs) from fact)






--6. Display the details of the product where product type is coffee. 

select * from product where Product_Type='Coffee'


--7. Display the details where total expenses are greater than 40.
 

select * from fact where Total_Expenses >40 order by  Total_Expenses  asc

 

--8. What is the average sales in area code 719?

select avg(sales) from fact where Area_Code=719




--9. Find out the total profit generated by Colorado state.

select state,sum(profit) from fact
inner join
Location
on
fact.area_code=location.Area_Code

where state=(select state from location where state ='Colorado'
 
 
 
--- 10. Display the average inventory for each product ID. 
 select productid,avg(inventory) from fact group by productid order by ProductId





--11. Display state in a sequential order in a Location Table. 
select  distinct(state) from location 
order by state





--12. Display the average budget of the Product where the average budget
--margin should be greater than 100.



select productid,avg(budget_margin)  as _budget from fact
group by productid
having avg(budget_margin) >100
order by  _budget

 
  


--13. What is the total sales done on date 2010-01-01?


select sum(sales) from fact where date='2010-01-01'  


--14. Display the average total expense of each product ID on an individual date. 
 

select date, productid,avg(total_expenses) as av from fact 
group by productid ,date 
order by date,ProductId




--15. Display the table with the following attributes such as date, productID, 
--product_type, product, sales, profit, state, area_code.


 


select  date, p.productID, product_type, product, sales, profit, state, f.area_code from fact   f


inner join
product p
on f.ProductId=p.ProductId


inner join 
Location l
on f.Area_Code=l.Area_Code
 




--16. Display the rank without any gap to show the sales wise rank.
SELECT
    ProductID,
    Sales,
    DENSE_RANK() OVER (ORDER BY Sales DESC) AS SalesRank
FROM
    Fact ;



--17. Find the state wise profit and sales.
SELECT
    Location .State,
    SUM(Fact.Profit) AS TotalProfit,
    SUM(Fact .Sales) AS TotalSales
FROM
    Fact 
JOIN
    Location 
ON
    Fact.Area_Code = Location.Area_Code
GROUP BY
    Location .State
ORDER BY
    Location .State;

 

--18. Find the state wise profit and sales along with the productname. 
SELECT
    Location .State,
    Product .Product,
    SUM(Fact .Profit) AS TotalProfit,
    SUM(Fact  .Sales) AS TotalSales
FROM
    Fact 
JOIN
    Location 
ON
    Fact.Area_Code = Location .Area_Code
JOIN
    Product 
ON
    Fact .ProductID = Product .ProductID
GROUP BY
    Location.State, Product .Product
ORDER BY
    Location .State, Product .Product;


--19. If there is an increase in sales of 5%, calculate the increasedsales.
SELECT
    ProductID,
    Sales,
    Sales * 1.05 AS IncreasedSales
FROM
    Fact ;


--20. Find the maximum profit along with the product ID and producttype.
SELECT
    p.ProductID,
    p. Type,
    f.MaxProfit
FROM
    Product p
JOIN
    (SELECT
        ProductID,
        MAX(Profit) AS MaxProfit
    FROM
        Fact
    GROUP BY
        ProductID) f
ON
    p.ProductID = f.ProductID;

 

--21. Create a stored procedure to fetch the result according to the product typefrom Product Table.
CREATE PROCEDURE FetchProductsByType  @ProductType VARCHAR(255)
  
AS
BEGIN
    SELECT *
    FROM Product
    WHERE  Type = @ProductType;
END;


EXEC FetchProductsByType 'regular';


--22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss.
SELECT 
    *,
    CASE 
        WHEN Total_Expenses < 60 THEN 'Profit'
        ELSE 'Loss'
    END AS ProfitOrLoss
FROM 
    Fact ;


--23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order.
SELECT 
    CONVERT(VARCHAR(10), Date, 120) AS WeekStart,
    ProductID,
    SUM(Sales) AS WeeklySales
FROM 
    Fact 
GROUP BY 
    ROLLUP (CONVERT(VARCHAR(10), Date, 120), ProductID)
ORDER BY 
    WeekStart, ProductID;


--24. Apply union and intersection operator on the tables which consist of
--attribute area code.
SELECT   Area_Code FROM fact
UNION
SELECT Area_Code FROM fact;

SELECT  Area_Code FROM fact
 intersection
SELECT Area_Code FROM fact;
 


--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference. 


CREATE FUNCTION dbo.GetProductsByType
(
    @ProductType VARCHAR(50)
)
RETURNS TABLE
AS
RETURN
(
    SELECT *
    FROM Product
    WHERE  Type = @ProductType
);
SELECT * FROM dbo.GetProductsByType('regular');

--26. Change the product type from coffee to tea where product IDis 1 andundoit.

 
begin TRANSACTION;
UPDATE Product
SET type = 'tea'
WHERE ProductID = 1;
 
-- Undo 
ROLLBACK;


--27. Display the date, product ID and sales where total expenses are
--between 100 to 200. 
SELECT
    Date,
    ProductID,
    Sales
FROM
    Fact 
WHERE
    Total_Expenses BETWEEN 100 AND 200;


--28. Delete the records in the Product Table for regular type.
DELETE FROM Product
WHERE  Type = 'regular';


--29. Display the ASCII value of the fifth character from the columnProduct
SELECT ASCII(SUBSTRING(Product, 5, 1)) AS ASCIIValue
FROM  product;
